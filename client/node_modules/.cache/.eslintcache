[{"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\index.js":"1","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\App.js":"2","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\RaceContainer.js":"3","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\PlanRace.js":"4","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Header.js":"5","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Tasks.js":"6","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\PrevRaceContainer.js":"7","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\AddRace.js":"8","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Button.js":"9","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Task.js":"10","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\RideList.js":"11","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Leaderboard.js":"12"},{"size":222,"mtime":1681913413254,"results":"13","hashOfConfig":"14"},{"size":6227,"mtime":1683887937664,"results":"15","hashOfConfig":"14"},{"size":630,"mtime":1682764044926,"results":"16","hashOfConfig":"14"},{"size":3314,"mtime":1682357145013,"results":"17","hashOfConfig":"14"},{"size":2254,"mtime":1683805518823,"results":"18","hashOfConfig":"14"},{"size":604,"mtime":1683804728197,"results":"19","hashOfConfig":"14"},{"size":286,"mtime":1682764065821,"results":"20","hashOfConfig":"14"},{"size":1396,"mtime":1682356923058,"results":"21","hashOfConfig":"14"},{"size":327,"mtime":1682355502076,"results":"22","hashOfConfig":"14"},{"size":6668,"mtime":1683803766514,"results":"23","hashOfConfig":"14"},{"size":1947,"mtime":1683624816990,"results":"24","hashOfConfig":"14"},{"size":2092,"mtime":1683209550990,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sc08ia",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\index.js",[],[],"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\App.js",["67","68","69"],[],"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\RaceContainer.js",["70"],[],"import PropTypes from \"prop-types\";\r\nimport Button from \"./Button\";\r\n\r\nconst RaceContainer = ({ title, planRace, buttonTitle, onAdd, showAdd }) => {\r\n  return (\r\n    <div className=\"header flex justify-between items-center w-full\">\r\n      <h1 className=\"text-xl font-bold text-purple-800\">{title}</h1>\r\n\r\n      <Button\r\n        color={\r\n          showAdd\r\n            ? \"bg-gray-300 text-purple-700 rounded-md p-1\"\r\n            : \"bg-purple-300 text-gray-700 rounded-md p-1\"\r\n        }\r\n        text={<a href={planRace}>{buttonTitle}</a>}\r\n        onClick={onAdd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaceContainer;\r\n","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\PlanRace.js",[],[],"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Header.js",["71"],[],"import PropTypes from \"prop-types\";\r\nimport Button from \"./Button\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Header = ({ title, profileLink, onAdd, showAdd, buttonTitle }) => {\r\n  const [hamburgerOpen, setHamburgerOpen] = useState(false);\r\n\r\n  const toggleHamburger = () => {\r\n    setHamburgerOpen(!hamburgerOpen);\r\n  };\r\n\r\n  return (\r\n    <header className=\"header w-full\">\r\n      <div className=\"container mx-auto max-w-6xl\">\r\n        <div className=\"text-xl font-bold text-purple-800 flex justify-between items-center py-4\">\r\n          <h1 className=\"text-center\">{title}</h1>\r\n          <div className=\"text-base font-normal text-purple-800 relative\">\r\n            <button\r\n              className=\"align-end rounded-full focus:shadow-outline-purple focus:outline-none\"\r\n              aria-label=\"Account\"\r\n              aria-haspopup=\"true\"\r\n              onClick={toggleHamburger}\r\n            >\r\n              <img\r\n                className=\"object-cover w-8 h-8 rounded-full\"\r\n                src=\"\"\r\n                alt=\"\"\r\n                aria-hidden=\"true\"\r\n              />\r\n            </button>\r\n            {hamburgerOpen && (\r\n              <div className=\"absolute right-0 mt-2 bg-white shadow-md rounded-md p-4 space-y-2\">\r\n                <a\r\n                  href=\"raceMates/linkStrava\"\r\n                  className=\"block text-purple-600 hover:text-purple-800 text-center\"\r\n                >\r\n                  Link your Strava Account!\r\n                </a>\r\n                <a\r\n                  href=\"/logout\"\r\n                  className=\"block text-purple-600 hover:text-purple-800 text-center\"\r\n                >\r\n                  Logout\r\n                </a>\r\n                <Button\r\n                  color={\r\n                    showAdd\r\n                      ? \"bg-gray-300 text-purple-700 rounded-md\"\r\n                      : \"bg-purple-300 text-gray-700 rounded-md \"\r\n                  }\r\n                  text={<a href={profileLink}>{buttonTitle}</a>}\r\n                  onClick={onAdd}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Tasks.js",[],[],"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\PrevRaceContainer.js",[],[],"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\AddRace.js",[],[],"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Button.js",[],[],"C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Task.js",["72","73","74","75"],[],"import React from \"react\";\nimport Button from \"./Button\";\nimport RideList from \"./RideList\";\nimport { useState, useEffect } from \"react\";\nimport Leaderboard from \"./Leaderboard\";\n\nconst Race = ({\n  race,\n  rides,\n  raceID,\n  onDelete,\n  getLeaderboard,\n  fetchRide,\n  selectRide,\n  userId,\n}) => {\n  const [sortKey, setSortKey] = useState(\"totalTime\");\n\n  const sortLeaderboard = (leaderboard, key) => {\n    const filteredLeaderboard = leaderboard.filter((participant) => {\n      if (key.startsWith(\"segment\")) {\n        const index = parseInt(key.split(\"-\")[1]);\n        return participant.segments[index].time;\n      } else {\n        return participant[key];\n      }\n    });\n\n    return filteredLeaderboard.sort((a, b) => {\n      if (key.startsWith(\"segment\")) {\n        const index = parseInt(key.split(\"-\")[1]);\n        return a.segments[index].time - b.segments[index].time;\n      } else {\n        return a[key] - b[key];\n      }\n    });\n  };\n  const sortedLeaderboard = sortLeaderboard(getLeaderboard(race), sortKey);\n\n  const isRideSubmitted = race.participants.some((participant) => {\n    return participant.user === userId && participant.submittedRide;\n  });\n\n  const userIsInJoinRequests = race.joinRequests.includes(userId);\n\n  const approveJoinRequest = async (raceId, userId) => {\n    const token = localStorage.getItem(\"jwt\");\n    try {\n      const response = await fetch(\n        `/raceMates/approveJoin/${raceId}/${userId}`,\n        {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to approve join request\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const ignoreJoinRequest = async (request) => {\n    const token = localStorage.getItem(\"jwt\");\n    try {\n      const updatedJoinRequests = race.joinRequests.filter(\n        (request) => request._id !== userId\n      );\n\n      const response = await fetch(`/raceMates/races/${race._id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ joinRequests: updatedJoinRequests }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to ignore the join request\");\n      }\n\n      // Reload the races to show the updated race\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Error ignoring join request:\", error);\n    }\n  };\n\n  return (\n    <div className=\"rounded-md flex align-center m-2 p-5 bg-purple-200\">\n      <div className=\"w-full overflow-x-auto\">\n        {userIsInJoinRequests ? (\n          <p className=\"rounded-md flex align-center m-2 p-5 bg-gray-200\">\n            Your join request has been sent and must be approved by the race\n            organizer.\n          </p>\n        ) : (\n          <>\n            <div className=\"p-4\">\n              {isRideSubmitted ? (\n                <h3 className=\"text-base font-bold text-purple-800\">\n                  {race.raceName}{\" \"}\n                  <p className=\"text-gray-700\">Ride submitted</p>\n                </h3>\n              ) : (\n                <h3 className=\"text-base font-bold text-purple-800\">\n                  {race.raceName}\n                </h3>\n              )}\n              <p className=\"text-gray-700 dark:text-gray-400\">\n                {race.segments &&\n                  race.segments.map((segment, index) => (\n                    <a\n                      key={segment}\n                      href={`https://www.strava.com/segments/${segment}`}\n                      target=\"_blank\"\n                      className=\"text-purple-800\"\n                    >\n                      {segment}\n                      {index !== race.segments.length - 1 && \", \"}\n                    </a>\n                  ))}\n              </p>\n\n              {race.organiserID == userId ? (\n                <div className=\"rounded-md m-2 p-5 bg-gray-200 text-purple-800\">\n                  <h4 className=\"mb-2\">\n                    You are the race organiser, share these details with\n                    participants:\n                  </h4>\n                  <div>\n                    <p className=\"mb-2\">Race ID: {race._id}</p>\n                    <p>Password: {race.partPass}</p>\n                  </div>\n                </div>\n              ) : (\n                \"\"\n              )}\n\n              {race.organiserID === userId && race.joinRequests.length > 0 && (\n                <div className=\"rounded-md flex align-center m-2 p-5 bg-gray-200\">\n                  <h4 className=\"text-gray-700\">Join Requests:</h4>\n                  {race.joinRequests.map((request) => (\n                    <div\n                      key={request._id}\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <span className=\"text-gray-700\">{request._id}</span>\n                      <button\n                        className=\"text-purple-600\"\n                        onClick={() =>\n                          approveJoinRequest(race._id, request._id)\n                        }\n                      >\n                        Approve\n                      </button>\n                      <button\n                        className=\"text-base text-purple-800\"\n                        onClick={() => ignoreJoinRequest(request)}\n                      >\n                        Ignore\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              <Leaderboard\n                race={race}\n                sortKey={sortKey}\n                setSortKey={setSortKey}\n                sortedLeaderboard={sortedLeaderboard}\n              />\n\n              {isRideSubmitted ? (\n                <Button\n                  color=\"bg-purple-300 text-gray-700 rounded-md p-1\"\n                  text=\"Submitted the wrong ride?\"\n                  onClick={() => {\n                    fetchRide(race);\n                  }}\n                />\n              ) : (\n                <Button\n                  color=\"bg-purple-300 text-gray-700 rounded-md p-1\"\n                  text=\"Upload ride\"\n                  onClick={() => {\n                    fetchRide(race);\n                  }}\n                />\n              )}\n\n              {rides?.length > 0 && raceID == race._id && (\n                <RideList rides={rides} selectRide={selectRide} />\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Race;\n","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\RideList.js",["76","77","78"],[],"import React from \"react\";\nimport Button from \"./Button\";\n\nfunction toHoursAndMinutes(totalSeconds) {\n  const totalMinutes = Math.floor(totalSeconds / 60);\n\n  const seconds = totalSeconds % 60;\n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n  if (hours == 0 && minutes == 0) {\n    return `${seconds}s`;\n  } else if (hours == 0) {\n    return `${minutes}m${seconds}s`;\n  } else {\n    return `${hours}hr${minutes}m${seconds}s`;\n  }\n}\n\nconst RideList = ({ rides, selectRide }) => {\n  let count = 0;\n  const rideListItems = rides.map((ride) => {\n    if (ride.segments) {\n      count += 1;\n      return (\n        <div\n          className=\"rounded-md m-2 p-5 bg-white\"\n          key={Math.floor(Math.random() * 100000)}\n        >\n          <div className=\"flex flex-col items-center justify-center mb-4\">\n            <h2 className=\"text-base font-bold text-purple-800\">{ride.name}</h2>\n            <table className=\"w-full whitespace-no-wrap text-center text-gray-500\">\n              <tr className=\"text-s font-semibold tracking-wide text-center  uppercase border-b\">\n                <th>Segment</th>\n                <th>Segment time</th>\n              </tr>\n              {ride.segments.map((segment) => (\n                <tr key={segment.name}>\n                  <td>{segment.name}</td>\n                  <td>{toHoursAndMinutes(segment.segmentTime)}</td>\n                </tr>\n              ))}\n            </table>\n          </div>\n          <div className=\"flex justify-end\">\n            <Button\n              color=\"bg-purple-300 text-gray-700 rounded-md p-1\"\n              onClick={() => {\n                selectRide(ride);\n              }}\n              text=\"Select this ride\"\n            />\n          </div>\n        </div>\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div>\n      {rideListItems}\n      {count < 1 && <p>You have no applicable rides.</p>}\n    </div>\n  );\n};\n\nexport default RideList;\n","C:\\Users\\chris\\Documents\\Github\\matesRace\\client\\src\\components\\Leaderboard.js",["79","80","81"],[],"import React from \"react\";\r\n\r\nfunction toHoursAndMinutes(totalSeconds) {\r\n  const totalMinutes = Math.floor(totalSeconds / 60);\r\n\r\n  const seconds = totalSeconds % 60;\r\n  const hours = Math.floor(totalMinutes / 60);\r\n  const minutes = totalMinutes % 60;\r\n  if (hours == 0 && minutes == 0) {\r\n    return `${seconds}s`;\r\n  } else if (hours == 0) {\r\n    return `${minutes}m${seconds}s`;\r\n  } else {\r\n    return `${hours}hr${minutes}m${seconds}s`;\r\n  }\r\n}\r\n\r\nconst Leaderboard = ({ race, sortKey, setSortKey, sortedLeaderboard }) => {\r\n  return (\r\n    <>\r\n      <h2 className=\"text-gray-700\">Leaderboard:</h2>\r\n      <table className=\"w-full whitespace-no-wrap\">\r\n        <thead>\r\n          <tr className=\"text-xs font-semibold tracking-wide text-center text-gray-500 uppercase border-b\">\r\n            <th>Rank</th>\r\n            <th>Name</th>\r\n            {race.participants.length > 0 &&\r\n              race.participants[0].segments.map((segment, index) => (\r\n                <th key={index} onClick={() => setSortKey(`segment-${index}`)}>\r\n                  {segment.name}\r\n                </th>\r\n              ))}\r\n            <th onClick={() => setSortKey(\"totalTime\")}>Total Time</th>\r\n            <th onClick={() => setSortKey(\"diffToLeader\")}>Behind</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"text-xs tracking-wide text-center divide-y \">\r\n          {sortedLeaderboard.map((participant, index) => (\r\n            <tr\r\n              key={index}\r\n              className={`text-gray-700 ${\r\n                index % 2 === 0 ? \"bg-gray-50 \" : \"\"\r\n              }`}\r\n            >\r\n              <td>{index + 1}</td>\r\n              <td>{participant.name}</td>\r\n              {participant.segments.map((segment, index) => (\r\n                <td key={index}>{toHoursAndMinutes(segment.time)}</td>\r\n              ))}\r\n              <td>{toHoursAndMinutes(participant.totalTime)}</td>\r\n              <td>+{toHoursAndMinutes(participant.diffToLeader)}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n",{"ruleId":"82","severity":1,"message":"83","line":26,"column":6,"nodeType":"84","endLine":26,"endColumn":8,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":51,"column":17,"nodeType":"88","messageId":"89","endLine":51,"endColumn":28},{"ruleId":"86","severity":1,"message":"90","line":154,"column":11,"nodeType":"88","messageId":"89","endLine":154,"endColumn":14},{"ruleId":"86","severity":1,"message":"91","line":1,"column":8,"nodeType":"88","messageId":"89","endLine":1,"endColumn":17},{"ruleId":"86","severity":1,"message":"92","line":3,"column":20,"nodeType":"88","messageId":"89","endLine":3,"endColumn":29},{"ruleId":"86","severity":1,"message":"92","line":4,"column":20,"nodeType":"88","messageId":"89","endLine":4,"endColumn":29},{"ruleId":"93","severity":1,"message":"94","line":121,"column":21,"nodeType":"95","messageId":"96","endLine":126,"endColumn":22,"fix":"97"},{"ruleId":"98","severity":1,"message":"99","line":133,"column":33,"nodeType":"100","messageId":"101","endLine":133,"endColumn":35},{"ruleId":"98","severity":1,"message":"99","line":201,"column":44,"nodeType":"100","messageId":"101","endLine":201,"endColumn":46},{"ruleId":"98","severity":1,"message":"99","line":10,"column":13,"nodeType":"100","messageId":"101","endLine":10,"endColumn":15},{"ruleId":"98","severity":1,"message":"99","line":10,"column":29,"nodeType":"100","messageId":"101","endLine":10,"endColumn":31},{"ruleId":"98","severity":1,"message":"99","line":12,"column":20,"nodeType":"100","messageId":"101","endLine":12,"endColumn":22},{"ruleId":"98","severity":1,"message":"99","line":9,"column":13,"nodeType":"100","messageId":"101","endLine":9,"endColumn":15},{"ruleId":"98","severity":1,"message":"99","line":9,"column":29,"nodeType":"100","messageId":"101","endLine":9,"endColumn":31},{"ruleId":"98","severity":1,"message":"99","line":11,"column":20,"nodeType":"100","messageId":"101","endLine":11,"endColumn":22},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'rides' and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["102"],"no-unused-vars","'segmentName' is assigned a value but never used.","Identifier","unusedVar","'res' is assigned a value but never used.","'PropTypes' is defined but never used.","'useEffect' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"103","text":"104"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"105","fix":"106"},[3771,3771]," rel=\"noreferrer\"","Update the dependencies array to be: [rides, userId]",{"range":"107","text":"108"},[934,936],"[rides, userId]"]